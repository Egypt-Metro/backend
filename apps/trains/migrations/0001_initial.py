# Generated by Django 4.2.18 on 2025-02-28 15:08

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("stations", "0005_connectingstation"),
    ]

    operations = [
        migrations.CreateModel(
            name="Train",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "train_id",
                    models.CharField(
                        db_index=True,
                        help_text="Unique identifier (format: line_number + train_number)",
                        max_length=10,
                        unique=True,
                    ),
                ),
                (
                    "number_of_cars",
                    models.IntegerField(
                        default=10,
                        help_text="Number of cars in this train",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                (
                    "has_air_conditioning",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the train has air conditioning",
                    ),
                ),
                (
                    "train_type",
                    models.CharField(
                        choices=[
                            ("AC", "Air Conditioned"),
                            ("NON_AC", "Non Air Conditioned"),
                        ],
                        default="NON_AC",
                        help_text="Type of train (AC/Non-AC)",
                        max_length=10,
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=6,
                        default=Decimal("0.000000"),
                        help_text="Current latitude of the train",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(
                                Decimal("-90.000000")
                            ),
                            django.core.validators.MaxValueValidator(
                                Decimal("90.000000")
                            ),
                        ],
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=6,
                        default=Decimal("0.000000"),
                        help_text="Current longitude of the train",
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(
                                Decimal("-180.000000")
                            ),
                            django.core.validators.MaxValueValidator(
                                Decimal("180.000000")
                            ),
                        ],
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[
                            ("HELWAN", "Helwan"),
                            ("MARG", "El-Marg"),
                            ("SHOBRA", "Shobra El Kheima"),
                            ("MONIB", "El-Monib"),
                            ("ADLY", "Adly Mansour"),
                            ("KIT_KAT", "Kit Kat"),
                        ],
                        help_text="Current direction of travel",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("IN_SERVICE", "In Service"),
                            ("DELAYED", "Delayed"),
                            ("MAINTENANCE", "Under Maintenance"),
                            ("OUT_OF_SERVICE", "Out of Service"),
                        ],
                        default="IN_SERVICE",
                        help_text="Current operational status",
                        max_length=20,
                    ),
                ),
                (
                    "speed",
                    models.FloatField(
                        default=0,
                        help_text="Current speed in km/h",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Last time train information was updated",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this train was added to the system",
                    ),
                ),
                (
                    "current_station",
                    models.ForeignKey(
                        help_text="Current station where the train is located",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="current_trains",
                        to="stations.station",
                    ),
                ),
                (
                    "line",
                    models.ForeignKey(
                        help_text="Metro line this train operates on",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trains",
                        to="stations.line",
                    ),
                ),
                (
                    "next_station",
                    models.ForeignKey(
                        help_text="Next station the train is heading to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="incoming_trains",
                        to="stations.station",
                    ),
                ),
            ],
            options={
                "verbose_name": "Metro Train",
                "verbose_name_plural": "Metro Trains",
                "ordering": ["line", "train_id"],
            },
        ),
        migrations.CreateModel(
            name="TrainCar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "car_number",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ]
                    ),
                ),
                ("capacity", models.IntegerField(default=180)),
                (
                    "current_load",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("is_operational", models.BooleanField(default=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "train",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cars",
                        to="trains.train",
                    ),
                ),
            ],
            options={
                "ordering": ["car_number"],
            },
        ),
        migrations.CreateModel(
            name="Schedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "arrival_time",
                    models.DateTimeField(
                        db_index=True, help_text="Expected arrival time at the station"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ON_TIME", "On Time"),
                            ("DELAYED", "Delayed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="ON_TIME",
                        help_text="Current status of the schedule",
                        max_length=10,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this schedule is currently active",
                    ),
                ),
                (
                    "expected_crowd_level",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                            ("HIGH", "High"),
                        ],
                        default="MODERATE",
                        help_text="Expected crowding level at the station",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "station",
                    models.ForeignKey(
                        help_text="Station for this schedule",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="train_schedules",
                        to="stations.station",
                    ),
                ),
                (
                    "train",
                    models.ForeignKey(
                        help_text="Train assigned to this schedule",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schedules",
                        to="trains.train",
                    ),
                ),
            ],
            options={
                "verbose_name": "Train Schedule",
                "verbose_name_plural": "Train Schedules",
                "ordering": ["arrival_time"],
            },
        ),
        migrations.CreateModel(
            name="CrowdMeasurement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("passenger_count", models.IntegerField()),
                (
                    "crowd_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Confidence level of the measurement (0-1)",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "measurement_method",
                    models.CharField(
                        choices=[
                            ("AI_CAMERA", "AI Camera Detection"),
                            ("WEIGHT_SENSOR", "Weight Sensor"),
                            ("MANUAL", "Manual Count"),
                            ("ESTIMATED", "AI Estimated"),
                        ],
                        help_text="Method used to measure crowd levels",
                        max_length=20,
                    ),
                ),
                (
                    "train_car",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="measurements",
                        to="trains.traincar",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.AddIndex(
            model_name="traincar",
            index=models.Index(
                fields=["train", "car_number"], name="trains_trai_train_i_429d09_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="traincar",
            index=models.Index(
                fields=["is_operational"], name="trains_trai_is_oper_329dcd_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="traincar",
            unique_together={("train", "car_number")},
        ),
        migrations.AddIndex(
            model_name="train",
            index=models.Index(
                fields=["train_id"], name="trains_trai_train_i_be36ab_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="train",
            index=models.Index(
                fields=["line", "status"], name="trains_trai_line_id_1cbd44_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="train",
            index=models.Index(
                fields=["current_station"], name="trains_trai_current_a486a7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="train",
            index=models.Index(
                fields=["direction", "status"], name="trains_trai_directi_73451d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="schedule",
            index=models.Index(
                fields=["station", "arrival_time"],
                name="trains_sche_station_74b613_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="schedule",
            index=models.Index(
                fields=["train", "arrival_time"], name="trains_sche_train_i_dad768_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="crowdmeasurement",
            index=models.Index(
                fields=["timestamp"], name="trains_crow_timesta_b9189c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="crowdmeasurement",
            index=models.Index(
                fields=["train_car", "timestamp"], name="trains_crow_train_c_6778e1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="crowdmeasurement",
            index=models.Index(
                fields=["measurement_method"], name="trains_crow_measure_c34a27_idx"
            ),
        ),
    ]
