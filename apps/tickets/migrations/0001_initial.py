# Generated by Django 4.2.18 on 2025-04-18 19:10

import apps.tickets.models.ticket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("stations", "0005_connectingstation"),
    ]

    operations = [
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "subscription_type",
                    models.CharField(
                        choices=[
                            ("MONTHLY", "Monthly"),
                            ("QUARTERLY", "Quarterly"),
                            ("ANNUAL", "Annual"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                (
                    "zones_count",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "1 Zone"),
                            (2, "2 Zones"),
                            (3, "3 Zones"),
                            (4, "4 Zones"),
                            (5, "5 Zones"),
                            (6, "6 Zones"),
                        ],
                        db_index=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("start_date", models.DateField(db_index=True)),
                ("end_date", models.DateField(db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("covered_zones", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ticket_number",
                    models.CharField(
                        default=apps.tickets.models.ticket.generate_ticket_number,
                        editable=False,
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "ticket_type",
                    models.CharField(
                        choices=[
                            ("BASIC", "Basic Ticket"),
                            ("STANDARD", "Standard Ticket"),
                            ("PREMIUM", "Premium Ticket"),
                            ("VIP", "VIP Ticket"),
                        ],
                        db_index=True,
                        default="BASIC",
                        help_text="Type of ticket",
                        max_length=20,
                        verbose_name="Ticket Type",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price of the ticket",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Ticket Price",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("IN_USE", "In Use"),
                            ("USED", "Used"),
                            ("USED_UPGRADED", "Used and Upgraded"),
                            ("EXPIRED", "Expired"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        db_index=True,
                        default="ACTIVE",
                        max_length=15,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        choices=[
                            ("YELLOW", "Yellow"),
                            ("GREEN", "Green"),
                            ("RED", "Red"),
                            ("BLUE", "Blue"),
                        ],
                        db_index=True,
                        max_length=10,
                    ),
                ),
                (
                    "max_stations",
                    models.IntegerField(
                        help_text="Maximum number of stations allowed for this ticket",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                ("entry_time", models.DateTimeField(blank=True, null=True)),
                ("exit_time", models.DateTimeField(blank=True, null=True)),
                ("valid_until", models.DateTimeField()),
                ("qr_code", models.TextField(blank=True)),
                ("validation_hash", models.CharField(blank=True, max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "entry_station",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ticket_entries",
                        to="stations.station",
                    ),
                ),
                (
                    "exit_station",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ticket_exits",
                        to="stations.station",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["ticket_number"], name="ticket_number_idx"),
                    models.Index(fields=["status"], name="ticket_status_idx"),
                    models.Index(fields=["user", "status"], name="user_status_idx"),
                    models.Index(
                        fields=["entry_station", "exit_station"], name="stations_idx"
                    ),
                    models.Index(fields=["valid_until"], name="valid_until_idx"),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="ticket",
            constraint=models.CheckConstraint(
                check=models.Q(("price__gte", 0)), name="ticket_price_non_negative"
            ),
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(fields=["user", "is_active"], name="user_active_idx"),
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(fields=["start_date", "end_date"], name="validity_idx"),
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(
                fields=["subscription_type", "zones_count"], name="type_zones_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.CheckConstraint(
                check=models.Q(("price__gte", 0)),
                name="subscription_price_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.CheckConstraint(
                check=models.Q(("end_date__gt", models.F("start_date"))),
                name="end_date_after_start_date",
            ),
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("subscription_type", "ANNUAL"), ("zones_count__in", [2, 3])
                    ),
                    models.Q(("subscription_type", "ANNUAL"), _negated=True),
                    _connector="OR",
                ),
                name="valid_annual_zones",
            ),
        ),
    ]
